generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}

// -------------------------------
// Enums
// -------------------------------
enum CommunityType {
  ESPORTS
  OUTDOOR
}

enum MatchStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

// -------------------------------
// Core Models
// -------------------------------
model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  verified      Boolean   @default(false)
  verificationToken String?
  createdAt     DateTime  @default(now())

  // Profile/Meta
  school        String?
  grade         Int?
  section       String?
  shift         String?
  facebook      String?
  instagram     String?
  discord       String?
  avatarUrl     String?
  // Membership
  hubId         String?
  communities   CommunityType[] @default([])
  games         String[]        @default([])
  
  // Aggregated counters (optional convenience for leaderboards)
  totalGoals        Int @default(0)
  totalAssists      Int @default(0)
  totalAppearances  Int @default(0)
  yellowCards       Int @default(0)
  redCards          Int @default(0)

  // Relations
  hub             Hub?      @relation(fields: [hubId], references: [id])
}

model Hub {
  id        String   @id @default(uuid())
  name      String
  type      CommunityType
  location  String
  capacity  Int      @default(30)

  // Relations
  users        User[]
  homeMatches  Match[] @relation("HomeHub")
  awayMatches  Match[] @relation("AwayHub")

  @@unique([type, name], name: "type_name")
}

model Match {
  id          String   @id @default(uuid())
  homeHubId   String
  awayHubId   String
  scheduledAt DateTime
  status      MatchStatus @default(SCHEDULED)
  homeScore   Int?
  awayScore   Int?
  resultNote  String?

  homeHub Hub @relation("HomeHub", fields: [homeHubId], references: [id])
  awayHub Hub @relation("AwayHub", fields: [awayHubId], references: [id])
}

// -------------------------------
// Events
// -------------------------------
model Event {
  id          String   @id @default(uuid())
  title       String
  subtitle    String?
  scheduledAt DateTime
  location    String
  prize       String?
  createdAt   DateTime @default(now())
}